param ([string]$driveLetter, [int]$DefaultSystemDriveWarningAbsolute, [int]$DefaultSystemDriveErrorAbsolute)

#=================================================================================
# Assign script name variable for use in event logging.
$ScriptName = "checkFreeDiskSpace.ps1"
$EventID = "100"
$ErrorEventID = "101"
#=================================================================================

#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject "MOM.ScriptAPI"
# Initialize a list to store error messages
$script:ErrorMessages = @()
# Initialize a list to store script output
$script:ScriptOutput = @()
# Log script event that we are starting the task
$script:ScriptOutput += "`nRunning as ($whoami)."
$script:ScriptOutput += "`nChecking drive $driveLetter"
#=================================================================================

#=================================================================================
# Load SCOM PropertyBag function
$propertyBag = $momapi.CreatePropertyBag()
#=================================================================================

# Begin MAIN script section
#=================================================================================
$NoAlertFile = "NoDiskAlerts.MOM"
$DefaultDriveWarningPercentage = 10
$DefaultDriveErrorPercentage = 5

function Check-DriveSpace {
    param (
        [PSCustomObject]$disk,
        [string]$Drive,
        [int]$WarningPercentageThreshold,
        [int]$ErrorPercentageThreshold,
        [int64]$WarningAbsoluteThreshold,
        [int64]$ErrorAbsoluteThreshold
    )

    if ($disk.TotalSpace -eq 0) {
        $script:ErrorMessages += "`nDrive $Drive cannot be checked."
        return $null
    }

    $percentFree = ($disk.FreeSpace / $disk.TotalSpace) * 100
    $state = "Healthy"

    if ($disk.BootDisk -eq $False -and $percentFree -lt $ErrorPercentageThreshold) {
		$script:ErrorMessages += "`nDrive $Drive is below percentage error threshold: $([math]::Round($percentFree, 2))% free, $($disk.FreeSpace) GB free."
        $state = "Error"
    }
    elseif ($disk.BootDisk -eq $False -and $percentFree -lt $WarningPercentageThreshold) {
        $script:ErrorMessages += "`nDrive $Drive is below percentage warning threshold: $([math]::Round($percentFree, 2))% free, $($disk.FreeSpace) GB free."
        $state = "Warning"
    }
    
    if ($disk.BootDisk -eq $True -and $disk.FreeSpace -lt $ErrorAbsoluteThreshold) {
        $script:ErrorMessages += "`nDrive $Drive is below absolute error threshold: $([math]::Round($percentFree, 2))% free, $($disk.FreeSpace) GB free."
        $state = "Error"
    }
    elseif ($disk.BootDisk -eq $True -and $disk.FreeSpace -lt $WarningAbsoluteThreshold) {
        $script:ErrorMessages += "`nDrive $Drive is below absolute warning threshold: $([math]::Round($percentFree, 2))% free, $($disk.FreeSpace) GB free."
        $state = "Warning"
    }

    return $state, $percentFree
}

function Get-Drive {
    $disks = @()

    foreach($disk in Get-CimInstance Win32_Diskdrive) {
        $diskMetadata = Get-Disk | Where-Object { $_.Number -eq $disk.Index } | Select-Object -First 1
        $partitions = Get-CimAssociatedInstance -ResultClassName Win32_DiskPartition -InputObject $disk

        foreach($partition in $partitions) {
            $drives = Get-CimAssociatedInstance -ResultClassName Win32_LogicalDisk -InputObject $partition

            foreach($drive in $drives) {
                $totalSpace = [math]::Round($drive.Size / 1GB, 3)
                $freeSpace  = [math]::Round($drive.FreeSpace / 1GB, 3)
                $usedSpace  = [math]::Round($totalSpace - $freeSpace, 3)

                $volume     = Get-Volume | Where-Object { $_.DriveLetter -eq $drive.DeviceID.Trim(":") } | Select-Object -First 1
                
                $disks += [PSCustomObject]@{
                    DriveLetter = $drive.DeviceID
                    BootDisk    = $diskMetadata.BootFromDisk
                    TotalSpace  = $totalSpace
                    FreeSpace   = $freeSpace
                    UsedSpace   = $usedSpace
                }
            }
        }
    }

    return $disks
}

function Get-DriveThresholds {
    param ([string]$driveLetter)

    $thresholds = @{
        "WarningPercentage" = $DefaultDriveWarningPercentage
        "ErrorPercentage" = $DefaultDriveErrorPercentage
    }
    $thresholdFile = "$driveLetter\DiskThreshold.MOM"
    
    if (Test-Path $thresholdFile) {
        $lines = Get-Content $thresholdFile
        foreach ($line in $lines) {
            # Check for the correct format (key = value)
            if ($line -match "^(\S+)\s*=\s*(\d+)$") {
                $key = $matches[1]
                $value = [int]$matches[2]

                # Validate that the key is one of the expected keys
                if ($key -eq "WarningPercentage" -or $key -eq "ErrorPercentage") {
                    # Check if the value is between 1 and 99
                    if ($value -ge 1 -and $value -le 99) {
                        $thresholds[$key] = $value
                    }
                    else {
                        $script:ErrorMessages += "`nInvalid value '$value' for key '$key' in threshold file for drive $driveLetter. Must be between 1 and 99. Using default value."
                    }
                }
                else {
                    $script:ErrorMessages += "`nInvalid key '$key' in threshold file for drive $driveLetter. Using default value."
                }
            }
            else {
                # Log an error if the line is not in the correct format
                $script:ErrorMessages += "`nInvalid format in threshold file for drive $driveLetter. Line: '$line'. Using default thresholds."
            }
        }
    }
    return $thresholds
}

#Call function Get-Drive to get information about the Logical Drive.
$disks = Get-Drive

foreach ($disk in $disks) {
    if ($disk.DriveLetter -eq $driveLetter) {
        if (Test-Path "$($disk.DriveLetter)\$NoAlertFile") {
            $script:ErrorMessages += "`nAlerts disabled for drive $disk.DriveLetter."
            continue
        }
    
        $thresholds = Get-DriveThresholds -driveLetter $driveLetter

        $state, $percentFree = Check-DriveSpace -disk $disk `
            -Drive $driveLetter `
            -WarningPercentageThreshold $thresholds["WarningPercentage"] `
            -ErrorPercentageThreshold $thresholds["ErrorPercentage"] `
            -WarningAbsoluteThreshold $DefaultSystemDriveWarningAbsolute `
            -ErrorAbsoluteThreshold $DefaultSystemDriveErrorAbsolute

        if ($disk.BootDisk -eq $True) {
                $isBootDisk = "Ja"
            }
            else {
                $isBootDisk = "Nee"
            }

        $propertyBag.AddValue("WarningPercentage", $thresholds.WarningPercentage)
        $propertyBag.AddValue("ErrorPercentage", $thresholds.ErrorPercentage)
        $propertyBag.AddValue("WarningAbsolute", $DefaultSystemDriveWarningAbsolute)
        $propertyBag.AddValue("ErrorAbsolute", $DefaultSystemDriveErrorAbsolute)
        $propertyBag.AddValue("PercentFree", $([math]::Round($percentFree, 2)))
        $propertyBag.AddValue("TotalSize", $disk.TotalSpace)
        $propertyBag.AddValue("FreeSpace", $disk.FreeSpace)
        $propertyBag.AddValue("IsBootDisk", $isBootDisk)
        $propertyBag.AddValue("Result", $state)
    }
}

# Consolidated Error Reporting
if ($ErrorMessages.Count -gt 0) {
    $momapi.LogScriptEvent($ScriptName, $ErrorEventID, 1, "`nThe following events were detected during script execution:`n$($ErrorMessages -join "`n")")
}

# Return Property Bag to SCOM
$propertyBag
#=================================================================================
# End of script section

# Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$script:ScriptOutput += "`nScript Completed, Runtime: ($ScriptTime) seconds."
$momapi.LogScriptEvent($ScriptName,$EventID,0,"$($ScriptOutput)")
#=================================================================================
