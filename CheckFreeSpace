param ([string]$driveLetter, [int]$DefaultSystemDriveWarningAbsolute, [int]$DefaultSystemDriveErrorAbsolute)

#=================================================================================
# Assign script name variable for use in event logging.
$ScriptName = "checkFreeDiskSpace.ps1"
$EventID = "100"
$ErrorEventID = "101"
#=================================================================================

#=================================================================================
# Gather the start time of the script
$StartTime = Get-Date
# Set variable to be used in logging events
$whoami = whoami
# Load MOMScript API
$momapi = New-Object -comObject "MOM.ScriptAPI"
# Initialize a list to store error messages
$script:ErrorMessages = @()
# Initialize a list to store script output
$script:ScriptOutput = @()
# Log script event that we are starting the task
$script:ScriptOutput += "`nRunning as ($whoami)."
$script:ScriptOutput += "`nChecking drive $driveLetter"
#=================================================================================

#=================================================================================
# Load SCOM PropertyBag function
$propertyBag = $momapi.CreatePropertyBag()
#=================================================================================

# Begin MAIN script section
#=================================================================================
$NoAlertFile = "NoDiskAlerts.MOM"
$DefaultDriveWarningPercentage = 10
$DefaultDriveErrorPercentage = 5

function Check-DriveSpace {
    param (
        [PSCustomObject]$logicalDisk,
        [string]$DriveLetter,
        [int]$WarningPercentageThreshold,
        [int]$ErrorPercentageThreshold,
        [int64]$WarningAbsoluteThreshold,
        [int64]$ErrorAbsoluteThreshold
    )

    if ($logicalDisk.TotalSpace -eq 0) {
        $script:ErrorMessages += "`nDrive $DriveLetter cannot be checked."
        return $null
    }

    $percentFree = ($logicalDisk.FreeSpace / $logicalDisk.TotalSpace) * 100
    $state = "Healthy"

    if ($logicalDisk.BootDisk -eq $False -and $percentFree -lt $ErrorPercentageThreshold) {
		$script:ErrorMessages += "`nDrive $DriveLetter is below percentage error threshold: $([math]::Round($percentFree, 2))% free, $($logicalDisk.FreeSpace) GB free."
        $state = "Error"
    }
    elseif ($logicalDisk.BootDisk -eq $False -and $percentFree -lt $WarningPercentageThreshold) {
        $script:ErrorMessages += "`nDrive $DriveLetter is below percentage warning threshold: $([math]::Round($percentFree, 2))% free, $($logicalDisk.FreeSpace) GB free."
        $state = "Warning"
    }
    
    if ($logicalDisk.BootDisk -eq $True -and $logicalDisk.FreeSpace -lt $ErrorAbsoluteThreshold) {
        $script:ErrorMessages += "`nDrive $DriveLetter is below absolute error threshold: $([math]::Round($percentFree, 2))% free, $($logicalDisk.FreeSpace) GB free."
        $state = "Error"
    }
    elseif ($logicalDisk.BootDisk -eq $True -and $logicalDisk.FreeSpace -lt $WarningAbsoluteThreshold) {
        $script:ErrorMessages += "`nDrive $DriveLetter is below absolute warning threshold: $([math]::Round($percentFree, 2))% free, $($logicalDisk.FreeSpace) GB free."
        $state = "Warning"
    }

    return $state, $percentFree
}

function Get-DriveInfo {
    param ([string]$driveLetter)
    $logicalDiskInfo = Get-CimInstance -ClassName win32_volume | where-object {$_.DriveLetter -eq $driveLetter} | Select-Object BootVolume, Capacity, DriveLetter, FreeSpace
    
    $totalSpace = [math]::Round($logicalDiskInfo.Capacity / 1GB, 3)
    $freeSpace  = [math]::Round($logicalDiskInfo.FreeSpace / 1GB, 3)
    $usedSpace  = [math]::Round($totalSpace - $freeSpace, 3)
         
    $logicalDisk += [PSCustomObject]@{
        DriveLetter = $logicalDiskInfo.DriveLetter
        BootDisk    = $logicalDiskInfo.BootVolume
        TotalSpace  = $totalSpace
        FreeSpace   = $freeSpace
        UsedSpace   = $usedSpace               
     }
    return $logicalDisk
}

function Get-DriveThresholds {
    param ([string]$driveLetter)

    $thresholds = @{
        "WarningPercentage" = $DefaultDriveWarningPercentage
        "ErrorPercentage" = $DefaultDriveErrorPercentage
    }
    $thresholdFile = "$driveLetter\DiskThreshold.MOM"
    
    if (Test-Path $thresholdFile) {
        $lines = Get-Content $thresholdFile
        foreach ($line in $lines) {
            # Check for the correct format (key = value)
            if ($line -match "^(\S+)\s*=\s*(\d+)$") {
                $key = $matches[1]
                $value = [int]$matches[2]

                # Validate that the key is one of the expected keys
                if ($key -eq "WarningPercentage" -or $key -eq "ErrorPercentage") {
                    # Check if the value is between 1 and 99
                    if ($value -ge 1 -and $value -le 99) {
                        $thresholds[$key] = $value
                    }
                    else {
                        $script:ErrorMessages += "`nInvalid value '$value' for key '$key' in threshold file for drive $driveLetter. Must be between 1 and 99. Using default value."
                    }
                }
                else {
                    $script:ErrorMessages += "`nInvalid key '$key' in threshold file for drive $driveLetter. Using default value."
                }
            }
            else {
                # Log an error if the line is not in the correct format
                $script:ErrorMessages += "`nInvalid format in threshold file for drive $driveLetter. Line: '$line'. Using default thresholds."
            }
        }
    }
    return $thresholds
}

#Call function Get-DriveInfo to get information about the Logical Drive.
$logicalDisk = Get-DriveInfo -driveLetter $driveLetter


if (Test-Path "$($driveLetter)\$NoAlertFile") {
    $script:AlertDescription = @()
    $script:ErrorMessages += "`nAlerts disabled for drive $driveLetter"
    $state = "Healthy"

    $propertyBag.AddValue("Result", $state)
    $propertyBag
}
    else {
    $thresholds = Get-DriveThresholds -driveLetter $driveLetter

    $state, $percentFree = Check-DriveSpace -logicalDisk $logicalDisk `
        -DriveLetter $driveLetter `
        -WarningPercentageThreshold $thresholds["WarningPercentage"] `
        -ErrorPercentageThreshold $thresholds["ErrorPercentage"] `
        -WarningAbsoluteThreshold $DefaultSystemDriveWarningAbsolute `
        -ErrorAbsoluteThreshold $DefaultSystemDriveErrorAbsolute
    
    if ($state -ne "Healthy") {
        $propertyBag.AddValue("PercentFree", $([math]::Round($percentFree, 2)))
        $propertyBag.AddValue("TotalSize", $logicalDisk.TotalSpace)
        $propertyBag.AddValue("FreeSpace", $logicalDisk.FreeSpace)
        #$propertyBag.AddValue("IsBootDisk", $isBootDisk)
        
        if ($logicalDisk.BootDisk -eq $True) {
            $isBootDisk = "Ja"
            $script:AlertDescription += "De drempel waarden voor deze disk zijn:`n"
            $script:AlertDescription += "Disk warning: $DefaultSystemDriveWarningAbsolute GB and Disk error: $DefaultSystemDriveErrorAbsolute GB`n"
            $script:AlertDescription += "Let op! De schijf waarop het besturingssysteem staat ge√Ønstalleerd is niet aan te passen via het bestand ' DiskThreshold.MOM ', er zijn hiervoor vaste waardes toegekend.`n"
            $propertyBag.AddValue("AlertDescription","$($AlertDescription)")
         }
            else {
                $isBootDisk = "Nee"
                $script:AlertDescription += "De drempel waarden voor deze disk zijn:`n"
                $script:AlertDescription += "Disk warning: $thresholds.WarningPercentage % and Disk error: $thresholds.ErrorPercentage %`n"
                $script:AlertDescription += "Als op deze disk een andere warning of error level moet worden toegekend, maak dan een bestand in de root van deze disk aan met de naam ' DiskThreshold.MOM ' met daarin de volgende regels zoals in onderstaand voorbeeld:`n"
                $script:AlertDescription += "WarningPercentage = 5`n"
                $script:AlertDescription += "ErrorPercentage = 1`n"
                $propertyBag.AddValue("AlertDescription","$($AlertDescription)")
            }
            $propertyBag.AddValue("IsBootDisk", $isBootDisk)

    }

    $propertyBag.AddValue("Result", $state)

    # Return Property Bag to SCOM
    $momapi.Return($propertyBag)
    $propertyBag
}
#=================================================================================
# End of MAIN script section

# Log an event for script ending and total execution time.
$EndTime = Get-Date
$ScriptTime = ($EndTime - $StartTime).TotalSeconds
$script:ScriptOutput += "`nScript Completed, runtime: ($ScriptTime) seconds."
$script:ScriptOutput += "`nStatus logical disk: $state."

# Consolidated Error Reporting
if ($ErrorMessages.Count -gt 0) {
    $script:ScriptOutput += "`n$($ErrorMessages -join "`n")"
}

$momapi.LogScriptEvent($ScriptName,$EventID,0,"$($ScriptOutput)")
#=================================================================================
